#SCOPE PROVIDE
spring.application.name = weather-back
server.servlet.context-path = /weather-back

# PORT
server.port = 3120
spring.jackson.date-format = yyyy-MM-dd

# DATASOURCE
#spring.datasource.url = jdbc:postgresql://10.5.193.120/desenv_login
#spring.datasource.username = desenv
#spring.datasource.password = desenvroot123
spring.datasource.url= jdbc:postgresql://localhost:5432/observation
spring.datasource.username= postgres
spring.datasource.password= G@delha
spring.datasource.driver-class-name = org.postgresql.Driver
spring.datasource.platform = postgres
spring.datasource.initialization-mode = always

# JPA - Java Persistence API
#spring.jpa.database = POSTGRESQL
spring.jpa.show-sql = false
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect
#spring.jpa.properties.hibernate.dialect = org.hibernate.spatial.dialect.postgis.PostgisDialect
spring.jpa.properties.hibernate.default_schema = weather

# PREVENT PROBLEMS WITH DELAY IN JSON DESERIALIZATION
spring.jackson.serialization.fail-on-empty-beans = true

# THE FIRST TIME YOU RUN IT, USE "create" TO CREATE THE: hibernate_sequence
spring.jpa.hibernate.ddl-auto = update

# App Properties
app.jwtIssuer = weather
app.jwtAudience = audience

#spring.main.allow-circular-references = false
#spring.main.allow-bean-definition-overriding = true

# ENDPOINTS
management.endpoint.shutdown.enabled=true
management.endpoints.web.exposure.include=*
#management.endpoints.exposure.exclude=env, bars

## ENDPOINT: INFO
info.app.name=@project.name@
info.app.groupId=@project.groupId@
info.app.artifactId=@project.artifactId@
info.app.version=@project.version@

management.info.git.mode=full

## APP PROPERTIES
BASE_PACKAGE = br.eti.gadelha
TITLE = Api Documentation
DESCRIPTION = API Manager
VERSION = 1.0.0
CONTACT_NAME = Marcelo Gadelha
CONTACT_URL = github.com/gadelhati
CONTACT_EMAIL = gadelha.ti@gmail.com

## API RESPONSES, REFERENCES: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status
response.200 = OK. The request has succeeded.
response.201 = The request has succeeded and a new resource has been created as a result. This is typically the response sent after POST requests, or some PUT requests.
response.202 = The request has been received but not yet acted upon. It is noncommittal, since there is no way in HTTP to later send an asynchronous response indicating the outcome of the request. It is intended for cases where another process or server handles the request, or for batch processing.
response.204 = There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
response.304 = This is used for caching purposes. It tells the client that the response has not been modified, so the client can continue to use the same cached version of the response.
response.400 = The server could not understand the request due to invalid syntax.
response.401 = Although the HTTP standard specifies "unauthorized", semantically this response means "unauthenticated". That is, the client must authenticate itself to get the requested response.
response.403 = The client does not have access rights to the content; that is, it is unauthorized, so the server is refusing to give the requested resource. Unlike 401, the client's identity is known to the server.
response.404 = The server can not find the requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurrence on the web.

#upload
spring.servlet.multipart.enabled=true
spring.servlet.multipart.file-size-threshold=2KB
spring.servlet.multipart.max-file-size=200MB
spring.servlet.multipart.max-request-size=215MB
file.upload-dir=./uploads